{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " * Serving Flask app '__main__'\n",
      " * Debug mode: off\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\n",
      " * Running on all addresses (0.0.0.0)\n",
      " * Running on http://127.0.0.1:5000\n",
      " * Running on http://192.168.100.96:5000\n",
      "Press CTRL+C to quit\n",
      "127.0.0.1 - - [04/Jan/2025 02:18:06] \"POST /recommend HTTP/1.1\" 200 -\n",
      "127.0.0.1 - - [04/Jan/2025 02:20:59] \"OPTIONS /recommend HTTP/1.1\" 200 -\n",
      "127.0.0.1 - - [04/Jan/2025 02:20:59] \"POST /recommend HTTP/1.1\" 200 -\n",
      "127.0.0.1 - - [04/Jan/2025 02:21:02] \"POST /recommend HTTP/1.1\" 200 -\n",
      "127.0.0.1 - - [04/Jan/2025 02:21:03] \"POST /recommend HTTP/1.1\" 200 -\n",
      "127.0.0.1 - - [04/Jan/2025 02:21:07] \"OPTIONS /recommend HTTP/1.1\" 200 -\n",
      "127.0.0.1 - - [04/Jan/2025 02:21:07] \"POST /recommend HTTP/1.1\" 200 -\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from flask import Flask, request, jsonify\n",
    "from sklearn.metrics.pairwise import cosine_similarity\n",
    "from flask_cors import CORS\n",
    "\n",
    "# Initialize Flask app\n",
    "app = Flask(__name__)\n",
    "CORS(app)  # Enable CORS\n",
    "\n",
    "# Load the activity data\n",
    "try:\n",
    "    activity_data = pd.read_csv('Events.csv')  # Replace with your file name\n",
    "    activity_data.columns = activity_data.columns.str.strip()  # Clean column names\n",
    "    activity_data['Participants'] = activity_data['Participants'].astype(int)  # Ensure numeric type for Participants\n",
    "except Exception as e:\n",
    "    raise RuntimeError(f\"Failed to load activity data: {e}\")\n",
    "\n",
    "# One-hot encode features for cosine similarity\n",
    "activity_features = pd.get_dummies(activity_data[['Duration', 'Category', 'Participants', 'SDG']])\n",
    "\n",
    "# In-memory storage to track user sessions and suggested activities\n",
    "session_store = {}\n",
    "\n",
    "@app.route('/recommend', methods=['POST'])\n",
    "def recommend():\n",
    "    try:\n",
    "        input_data = request.get_json()\n",
    "\n",
    "        if not input_data:\n",
    "            return jsonify({\"error\": \"Input data is required\"}), 400\n",
    "\n",
    "        # Ensure at least 2 features are provided\n",
    "        required_features = ['Duration', 'Category', 'Participants', 'SDG']\n",
    "        selected_features = [key for key in required_features if key in input_data and input_data[key]]\n",
    "\n",
    "        if len(selected_features) < 2:\n",
    "            return jsonify({\"error\": \"Please select at least 2 features for filtering.\"}), 400\n",
    "\n",
    "        # Create a unique session ID based on input data (you can use client-specific identifiers)\n",
    "        session_id = str(input_data)\n",
    "\n",
    "        # Filter the dataset based on selected features\n",
    "        filtered_data = activity_data.copy()\n",
    "        strict_match_count = 0\n",
    "\n",
    "        for feature in selected_features:\n",
    "            filtered_data = filtered_data[filtered_data[feature] == input_data[feature]]\n",
    "            strict_match_count += 1\n",
    "\n",
    "            # Stop filtering after two strict matches\n",
    "            if strict_match_count == 2:\n",
    "                break\n",
    "        for feature in selected_features:\n",
    "            filtered_data = filtered_data[filtered_data[feature] == input_data[feature]]\n",
    "\n",
    "        # If no matching activities are found, use the entire dataset as a fallback\n",
    "        if filtered_data.empty:\n",
    "            filtered_data = activity_data\n",
    "\n",
    "        # One-hot encode input data for similarity scoring\n",
    "        input_df = pd.DataFrame([input_data])\n",
    "        input_features = pd.get_dummies(input_df)\n",
    "        input_features = input_features.reindex(columns=activity_features.columns, fill_value=0)\n",
    "\n",
    "        # Calculate cosine similarity with the filtered (or entire) dataset\n",
    "        filtered_features = pd.get_dummies(filtered_data[['Duration', 'Category', 'Participants', 'SDG']])\n",
    "        filtered_features = filtered_features.reindex(columns=activity_features.columns, fill_value=0)\n",
    "\n",
    "        similarity_scores = cosine_similarity(input_features, filtered_features)\n",
    "\n",
    "        # Rank activities by weighted similarity\n",
    "        weights = {'Category': 4, 'Duration': 2, 'Participants': 2, 'SDG': 1}\n",
    "        weighted_scores = (\n",
    "            similarity_scores[0] *\n",
    "            filtered_features.mul(\n",
    "                filtered_features.columns.map(\n",
    "                    lambda col: weights.get(col.split('_')[0], 1)\n",
    "                ),\n",
    "                axis=1\n",
    "            ).sum(axis=1).values\n",
    "        )\n",
    "\n",
    "        # Track already suggested indices for this session\n",
    "        if session_id not in session_store:\n",
    "            session_store[session_id] = set()  # Initialize session storage\n",
    "\n",
    "        # Exclude previously suggested activities\n",
    "        available_indices = [i for i in range(len(filtered_data)) if i not in session_store[session_id]]\n",
    "\n",
    "        # If no more activities are available, reset the session for cyclic suggestions\n",
    "        if not available_indices:\n",
    "            session_store[session_id].clear()  # Reset the session store\n",
    "            available_indices = list(range(len(filtered_data)))\n",
    "\n",
    "        # Get top 5 activities based on similarity\n",
    "        top_indices = sorted(available_indices, key=lambda i: weighted_scores[i], reverse=True)[:5]\n",
    "        matched_activities = filtered_data.iloc[top_indices].to_dict(orient='records')\n",
    "\n",
    "        # If fewer than 5 activities are matched, fill the remainder with fallback activities\n",
    "        if len(matched_activities) < 5:\n",
    "            fallback_data = activity_data[~activity_data.index.isin(filtered_data.index)]\n",
    "            fallback_features = pd.get_dummies(fallback_data[['Duration', 'Category', 'Participants', 'SDG']])\n",
    "            fallback_features = fallback_features.reindex(columns=activity_features.columns, fill_value=0)\n",
    "            fallback_similarity_scores = cosine_similarity(input_features, fallback_features)\n",
    "            fallback_top_indices = fallback_similarity_scores[0].argsort()[::-1][: (5 - len(matched_activities))]\n",
    "            fallback_activities = fallback_data.iloc[fallback_top_indices].to_dict(orient='records')\n",
    "            matched_activities.extend(fallback_activities)\n",
    "\n",
    "        # Update session store with the indices of suggested activities\n",
    "        session_store[session_id].update(top_indices)\n",
    "\n",
    "        return jsonify(matched_activities)\n",
    "    except Exception as e:\n",
    "        return jsonify({\"error\": f\"An error occurred: {str(e)}\"}), 500\n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    app.run(host=\"0.0.0.0\", port=5000)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip freeze > requirements.txt"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
